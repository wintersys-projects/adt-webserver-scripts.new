#!/bin/sh
###########################################################################################################
# Description: We need an SSL certificate for each of our webservers and we generate our cerificate here.
# We want an authoritative webserver to generate the certificate so we put in a sleep so that the first
# webserver to claim to be authoritative becomes authoritative by writing a lock file to the datastore.
# A certificate won't be generated by a webserver unless it has the lock. Ceritifcates are only generated
# by the first webserver that finds that its current certificate has expired. This certificate is generated and then
# distributed written to the datastore and then distributed to the other webservers as a "fresh" certificate which
# will have a full lifespan again. We sleep for 500 seconds in the case where we can get the lock and we don't get the lock
# to make sure that either the authoritative webserver has had time to write the new certificate to the datastore
# or to preserve our hold on the lock until all other webservers must have been actioned
# Date: 16/11/2016
# Author: Peter Winter
###########################################################################################################
# License Agreement:
# This file is part of The Agile Deployment Toolkit.
# The Agile Deployment Toolkit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# The Agile Deployment Toolkit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with The Agile Deployment Toolkit.  If not, see <http://www.gnu.org/licenses/>.
#######################################################################################################
#######################################################################################################
#set -x

trap cleanup 0 1 2 3 6 9 14 15

cleanup()
{
	${HOME}/providerscripts/datastore/configwrapper/DeleteFromConfigDatastore.sh "sslcertlock.file"
	exit
}

WEBSITE_URL="`${HOME}/providerscripts/utilities/ExtractConfigValue.sh 'WEBSITEURL'`"

/bin/sleep "`/usr/bin/shuf -i1-300 -n1`"

if ( [ "`${HOME}/providerscripts/datastore/configwrapper/CheckConfigDatastore.sh "sslcertlock.file"`" = "0" ] )
then
	/usr/bin/touch ${HOME}/runtime/sslcertlock.file
	${HOME}/providerscripts/datastore/configwrapper/PutToConfigDatastore.sh ${HOME}/runtime/sslcertlock.file 
	${HOME}/security/InstallSSLCertificate.sh
	/bin/sleep 500
	${HOME}/providerscripts/datastore/configwrapper/DeleteFromConfigDatastore.sh "sslcertlock.file"
else
	/bin/sleep 500
	if ( [ "`${HOME}/providerscripts/datastore/configwrapper/CheckConfigDatastore.sh SSLUPDATED`" = "1" ] && [ ! -f ${HOME}/runtime/SSLUPDATED ] )
	then
		#There is an updated SSL certificate, we want it so get it and install it and then reload the webserver
		/bin/cp ${HOME}/ssl/live/${WEBSITE_URL}/fullchain.pem ${HOME}/ssl/live/${WEBSITE_URL}/fullchain.pem.$$
		/bin/cp ${HOME}/ssl/live/${WEBSITE_URL}/privkey.pem ${HOME}/ssl/live/${WEBSITE_URL}/privkey.pem.$$
		${HOME}/providerscripts/datastore/configwrapper/GetFromConfigDatastore.sh ssl/fullchain.pem ${HOME}/ssl/live/${WEBSITE_URL}/fullchain.pem
		${HOME}/providerscripts/datastore/configwrapper/GetFromConfigDatastore.sh ssl/privkey.pem ${HOME}/ssl/live/${WEBSITE_URL}/privkey.pem
		/bin/chown www-data:www-data ${HOME}/ssl/live/${WEBSITE_URL}/fullchain.pem ${HOME}/ssl/live/${WEBSITE_URL}/privkey.pem
		/bin/chmod 400 ${HOME}/ssl/live/${WEBSITE_URL}/fullchain.pem ${HOME}/ssl/live/${WEBSITE_URL}/privkey.pem
		/bin/chown root:root ${HOME}/ssl/live/${WEBSITE_URL}/fullchain.pem ${HOME}/ssl/live/${WEBSITE_URL}/privkey.pem
		${HOME}/providerscripts/webserver/RestartWebserver.sh
		/bin/touch ${HOME}/runtime/SSLUPDATED
	fi
	/bin/echo "script already running"
fi


